# Example Environment variables for local development with 'dagster dev'
# Copy this file to .env and fill in appropriate values (especially secrets)

# == Dagster Instance Configuration ==
# Tells Dagster where to store local metadata (runs, assets, etc.)
# MUST be an absolute path to the directory within your project
DAGSTER_HOME=/path/to/your/project/.dagster_home # <-- !!! UPDATE THIS PATH IN .env !!!

# == Postgres Configuration (for Dagster Instance Storage) ==
# Configure connection to the Postgres instance used by Dagster itself.
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres # !!! CHANGE THIS IN .env FOR PRODUCTION/SHARED ENVIRONMENTS !!!
POSTGRES_DB=postgres_db
POSTGRES_HOST=localhost # Assumes local instance or port-forwarded
POSTGRES_PORT=5432

# == MinIO / S3 Compatible Storage ==
# Used by Dagster resources (e.g., S3Resource, IOManager) to connect to MinIO
S3_ENDPOINT_URL=http://localhost:9000 # Should point to your local MinIO access point (Docker, K8s NodePort/Port-forward)
# Credentials Dagster's S3Resource uses to connect
AWS_ACCESS_KEY_ID=minioadmin # Should match the credentials used in your K8s Minio deployment
AWS_SECRET_ACCESS_KEY=minioadmin # !!! CHANGE THIS IN .env FOR PRODUCTION/SHARED ENVIRONMENTS !!! Should match K8s Minio

# == Application Specific S3 Buckets ==
# These should match the buckets created by your K8s Minio setup
S3_LANDING_BUCKET=ateda-landing
S3_BRONZE_BUCKET=ateda-bronze
S3_SILVER_BUCKET=ateda-silver
S3_GOLD_BUCKET=ateda-gold

# == Dagster Pipes ==
DAGSTER_PIPES_BUCKET=ateda-pipes # Bucket for Pipes communication (Should exist in Minio)

# == Lakekeeper (Iceberg REST Catalog) ==
# URI for accessing Lakekeeper service from the host
# (e.g., kubectl port-forward service/ateda-lakekeeper-dev -n ateda-dev 8181:8181)
LAKEKEEPER_URI=http://localhost:8181 # Base URI for the REST Catalog

# == Add other environment-specific variables below ==
# e.g., SOME_API_KEY=
