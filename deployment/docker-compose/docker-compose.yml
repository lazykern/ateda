services:
  postgres:
    image: postgres:13
    container_name: postgres # Added for easier reference if needed
    ports: # Ensure port is exposed to host
      - "5432:5432"
    environment:
      # Read from .env
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - ateda_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] # Use env vars
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    command: server /data --console-address ":9001"
    networks:
      - ateda_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO...' &&
      until /usr/bin/mc config host add localminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do echo '...waiting...' && sleep 1; done &&
      echo 'MinIO host configured.' &&
      echo 'Attempting to create buckets: ${S3_LANDING_BUCKET}, ${S3_BRONZE_BUCKET}, ${S3_SILVER_BUCKET}, ${S3_GOLD_BUCKET}' &&
      /usr/bin/mc mb --ignore-existing localminio/${S3_LANDING_BUCKET} &&
      /usr/bin/mc mb --ignore-existing localminio/${S3_BRONZE_BUCKET} &&
      /usr/bin/mc mb --ignore-existing localminio/${S3_SILVER_BUCKET} &&
      /usr/bin/mc mb --ignore-existing localminio/${S3_GOLD_BUCKET} &&
      echo 'MinIO setup complete.' &&
      exit 0;
      "
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      # Pass all bucket names for creation
      S3_LANDING_BUCKET: "${S3_LANDING_BUCKET}"
      S3_BRONZE_BUCKET: "${S3_BRONZE_BUCKET}"
      S3_SILVER_BUCKET: "${S3_SILVER_BUCKET}"
      S3_GOLD_BUCKET: "${S3_GOLD_BUCKET}"
    networks:
      - ateda_network

volumes:
  postgres_data:
  minio_data: {}

networks:
  ateda_network:
    driver: bridge
    name: ateda_network
